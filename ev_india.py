# -*- coding: utf-8 -*-
"""EV INDIA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h49bzQK7ZQBTWOddJumbdmEVrVRbOzKt

*Sure, here's a detailed step-by-step project that demonstrates how to cluster an electric vehicle (EV) dataset using the K-means clustering algorithm in Python:*

**Step 1: Importing the required libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
import re

"""**Step 2: Loading the dataset**"""

# Import the dataset
df = pd.read_csv('/content/EVIndia.csv')

"""**Step 3: Exploratory data analysis**"""

df.head(10)

# Check the shape of the dataset
print(df.shape)
# Check the data types of each column
print(df.dtypes)

# Check for any missing values
print(df.isnull().sum())

"""**Step 4: Data preprocessing**"""

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
df['Car'] = label_encoder.fit_transform(df['Car'])
df['Range'] = label_encoder.fit_transform(df['Range'])
df['PriceRange'] = label_encoder.fit_transform(df['PriceRange'])
df['BootSpace'] = label_encoder.fit_transform(df['BootSpace'])

# Drop the missing values
df.dropna(inplace=True)

# Select relevant features
X = df[['Car', 'Range', 'PriceRange', 'BootSpace']]

# Normalize the data
X = StandardScaler().fit_transform(X)

"""**Step 5: Choosing the optimal number of clusters**"""

# Determine the optimal number of clusters using the elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()



# Based on the elbow method, we choose the optimal number of clusters as 3
n_clusters = 3

# Perform K-means clustering
kmeans = KMeans(n_clusters=n_clusters, init='k-means++', max_iter=300, n_init=10, random_state=0)
pred_y = kmeans.fit_predict(X)

# Visualize the clusters
plt.scatter(X[:, 0], X[:, 1], c=pred_y)
plt.title('EV Clustering in India')
plt.xlabel('car')
plt.ylabel('PriceRange')
plt.show()

from sklearn.metrics import silhouette_score

score = silhouette_score(X, pred_y)
print('Silhouette score:', score)